#### 1 ::双冒号作用域运算符

```
c++
#include "iostream"
using namespace std;
int atk = 200;

void atknumber()
{
    int atk =100;

    //采用就近原则
    cout << "没加双冒号的atk = " << atk << endl;

    //有双冒号，启用全局变量
    cout << "加了双冒号的atk = " << ::atk << endl;
}

int main()
{
    atknumber();
    return 0;

}

```

#### 2 namespace 命名空间

##### 2.1 用途： 解决名称冲突问题

```c++
void test01()
{
	LOL::goAtk();
	KingGlory::goAtk();
}

```

##### 2.2 命名空间下可以放函数、变量、结构体、类

##### 2.3 命名空间可以嵌套命名

```c++
//namespace命名空间主要用途 用来解决命名冲突的问题
void test01()
{
	LOL::goAtk();
	KingGlory::goAtk();
}


//1、命名空间下 可以放函数、变量、结构体、类
namespace A
{
	void func();
	int m_A = 20;
	struct Person
	{
	};
	class Animal{};
	namespace B
	{
		int m_A = 10;
	}
}
//2、命名空间必须定义在全局作用域下
//3、命名空间可以嵌套命名空间
```

##### 2.4 命名空间是开放的

```c++
//4、命名空间是开放的，可以随时往原先的命名空间添加内容
namespace A  //此A命名空间会和上面的命名空间A进行合并
{
	int m_B = 1000;
}
```

##### 2.5 匿名命名空间static

```c++
//5、无名、匿名命名空间
namespace
{
	int m_C = 0;
	int m_D = 0;
}
//当写了无名命名空间，相当于写了 static int m_C ; static int m_D;
//只能在当前文件内使用
```

##### 2.6 可以起别名

```c++
//6、命名空间可以起别名
namespace veryLongName
{
	int m_A = 0;
}
void test04()
{
	//起别名
	namespace veryShortName = veryLongName;
	cout << veryLongName::m_A << endl;
	cout << veryShortName::m_A << endl;
}
```

#### 3    using声明和using编译指令

##### 3.1     using LOL:: sunwukongID;

##### 3.2     如果局部范围内还有 sunwukongID，会出现二义性问题，要注意避免

```c++
namespace KingGlory
{
	int sunwukongId = 10;
}

void test01()
{
	int sunwukongId = 20;

	//using 声明  注意避免二义性问题
	//写了using声明后  下面这行代码说明以后看到的sunwukongId 是用KingGlory下的
	//但是  编译器又有就近原则
	//二义性
	//using KingGlory::sunwukongId;

	cout << sunwukongId << endl;
}
```



##### 3.3     编译指令

```c++
//using编译指令
namespace LOL
{
	int sunwukongId = 30;
}
void test02()
{
	//int sunwukongId = 20;
	//using编译指令
	using namespace KingGlory; //打开王者荣耀房间
	using namespace LOL;//打开LOL房间
	//如果打开多个房间，也要避免二义性问题
	cout << LOL::sunwukongId << endl;
}

```



##### 3.4     using namespace LOL

##### 3.5     如果局部范围内还有 sunwukongID ,使用局部的ID

##### 3.6     如果打开多个房间，那么也要注意二义性问题

#### 4     C++对C语言增强

##### 4.1     全局变量检测增强

```c++
//1、全局变量检测增强//int a;int a = 10;
```



##### 4.2     函数检测增强

######       4.2.1  参数类型检测

###### 4.2.2  返回值检测

###### 4.2.3  传参个数检测

```c++
//2、函数检测增强 ,参数类型增强,返回值检测增强,函数调用参数检测增强int getRectS(int w, int h){	return w*h;}void test02(){	getRectS(10, 10);}
```



##### 4.3        类型转换检测增强

###### 4.3.1  malloc返回void* ，C中可以不用强转，C++必须强转

```c++
//3、类型转换检测增强void test03(){	char * p = (char*)malloc(sizeof(64)); //malloc返回值是void*}
```



##### 4.4     struct增强

###### 4.4.1  C中不许有函数 C++可以

###### 4.4.2  使用C必须加关键字 struct ，C++可以不加

```c++
//4、struct 增强struct Person{	int m_Age;	void plusAge(){ m_Age++; }; //c++中struct可以加函数};void test04(){	Person p1; //使用时候可以不加struct关键字	p1.m_Age = 10;	p1.plusAge();	cout << p1.m_Age << endl;}
```



##### 4.5     bool数据类型增强

###### 4.5.1  C没有 C++有

###### 4.5.2  true 真 false假

###### 4.5.3  sizeof 1

```c++
//5、 bool类型增强 C语言中没有bool类型bool flag = true; //只有真或假 true代表 真（非0）  false 代表假（0）void test05(){	cout << sizeof(bool) << endl;	flag = 100;	//bool类型 非0的值 转为 1  ，0就转为0	cout << flag << endl;}
```



##### 4.6     三目运算符增强

###### 4.6.1  C中返回的是值

###### 4.6.2  C++中返回的是变量

```c++
//6、三目运算符增强void test06(){	int a = 10;	int b = 20;	cout << "ret = " << (a < b ? a : b) << endl;		(a < b ? a : b) = 100; //b = 100 C++中返回的是变量	 	cout << "a = " << a << endl;	cout << "b = " << b << endl;}
```



##### 4.7     const增强

###### 4.7.1  C语言中const是伪常量，可以通过指针修改

###### 4.7.2  C++中const会放入到符号表中

###### 4.7.3  C语言中const默认是外部链接，C++中const默认是内部链接  需要给外部文件引用部分加上extern

```c++
const int m_A = 10; //收到保护，不可以改void test07(){	const int m_B = 20; //真正常量	//m_B = 100;	int * p = (int *)&m_B;	*p = 200;	cout << "*p = " << *p << endl;	cout << "m_B = " << m_B << endl;	int arr[m_B]; //可以初始化数组}
```

